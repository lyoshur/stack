<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Golang on 羡鱼先生的空间</title>
        <link>https://lyoshur.gitee.io/categories/golang/</link>
        <description>Recent content in Golang on 羡鱼先生的空间</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 06 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://lyoshur.gitee.io/categories/golang/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>GO反向代理要求</title>
        <link>https://lyoshur.gitee.io/p/go%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%A6%81%E6%B1%82/</link>
        <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
        
        <guid>https://lyoshur.gitee.io/p/go%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%A6%81%E6%B1%82/</guid>
        <description>&lt;p&gt;0 概述&lt;/p&gt;
&lt;p&gt;使用golang开发tcp反向代理程序 实现ha(热备)/lb(负载均衡)的效果
console app即可，无需gui界面
提交go源码和可执行文件&lt;/p&gt;
&lt;p&gt;1 基本要求&lt;/p&gt;
&lt;p&gt;面向对象设计
代码规范 注释充分 逻辑清晰 可读性好
长时运行无内存泄露
不使用非开源或版权受限的第三方库代码
请在提交方案中充分说明为什么是你
无golang开发经验免谈&lt;/p&gt;
&lt;p&gt;2 系统配置&lt;/p&gt;
&lt;p&gt;使用json文件配置系统参数&lt;/p&gt;
&lt;p&gt;3 tcp端口转发&lt;/p&gt;
&lt;p&gt;根据配置文件监听tcp端口
当有client连接进来时 创建TCPProxySession对象
所有TCPProxySession使用ProxySessionService进行状态监测和生命周期管理
根据lb策略连接后台server
使用独立goroutine 读client连接并写入server连接
使用独立goroutine 读server连接并写入client
client/server断开时 注销TCPProxySession并释放所有资源
长时间cleint/server无读无写时 注销TCPProxySession&lt;/p&gt;
&lt;p&gt;4 lb策略&lt;/p&gt;
&lt;p&gt;支持ha Round-Robin ip_hash 多种LB策略，可根据系统配置切换
ha - 热备，总是把所有请求转发到在线服务器列表的首台服务器，直至其掉线移除
round-robin - 循环，每一次把来自用户的请求轮流分配给所有在线服务器，从1开始，直到N(内部服务器个数)，然后重新开始循环。
ip_hash - 根据客户端ip计算hash code，然后取在线服务器数量的模得到N，然后转发到第N台服务器
抽象IBalancePolicy接口，并使用工厂模式创建实例&lt;/p&gt;
&lt;p&gt;5 http接口&lt;/p&gt;
&lt;p&gt;import &amp;ldquo;net/http/pprof&amp;quot;以方便内存诊断
worker-keepalive.do?group=&amp;lt;监听端口&amp;gt;&amp;amp;server=&lt;!-- raw HTML omitted --&gt;:&lt;!-- raw HTML omitted --&gt; 接收服务器注册和心跳 更新在线服务器列表
worker-list.do?group=&amp;lt;监听端口&amp;gt; 查看在线服务器列表
group-open.do?group=&amp;lt;监听端口&amp;gt; 打开端口监听
group-close.do?group=&amp;lt;监听端口&amp;gt; 关闭端口监听
管理接口的输入使用get 返回使用json: { &amp;ldquo;ok&amp;rdquo; : true | false, &amp;ldquo;msg&amp;rdquo; : &amp;ldquo;错误提示&amp;rdquo;, &amp;hellip; }
所有管理接口的参数持久化到系统配置文件 下次重启直接生效&lt;/p&gt;
&lt;p&gt;6 日志&lt;/p&gt;
&lt;p&gt;所有client/server连接和断开事件写日志
所有http请求和输出有日志
每隔5秒定时打印日志：在线client，在线server&lt;/p&gt;
</description>
        </item>
        <item>
        <title>go中的module和GOPATH</title>
        <link>https://lyoshur.gitee.io/p/go%E4%B8%AD%E7%9A%84module%E5%92%8Cgopath/</link>
        <pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate>
        
        <guid>https://lyoshur.gitee.io/p/go%E4%B8%AD%E7%9A%84module%E5%92%8Cgopath/</guid>
        <description>&lt;h1 id=&#34;go中的module和gopath&#34;&gt;go中的module和GOPATH&lt;/h1&gt;
&lt;p&gt;在GO 1.11 中，开始使用module组织项目依赖。&lt;/p&gt;
&lt;p&gt;首先是差别，GOPATH要求项目按照工程名-src。全部的依赖会放置到 GOPATH/src中。这里类似于java最开始lib的方式。&lt;/p&gt;
&lt;p&gt;新的module方式，会在项目下生成一个go.mod文件，来对当前项目的模块名和依赖进行描述。&lt;/p&gt;
&lt;p&gt;1.需要注意，使用命令go mod init &amp;lt;module_name&amp;gt; 对模块进行初始化时，虽然没有要求，但是在被其他模块 go get 时，仍要求模块名等同于路径名。&lt;/p&gt;
&lt;p&gt;eg :  gitee.com/lyoshur/golog&lt;/p&gt;
&lt;p&gt;2.在定义git标签时，应该尽量避免使用已经存在的标签，否则可能因为缓存问题，导致依赖下载出问题。&lt;/p&gt;
&lt;p&gt;3.一个常用的GOPROXY&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://goproxy.cn,direct
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
